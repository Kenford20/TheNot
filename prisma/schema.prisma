// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Website {
  id                String     @id @default(uuid())
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  userId            String     @unique
  url               String     @unique
  subUrl            String     @unique
  isPasswordEnabled Boolean    @default(false)
  password          String?
  isRsvpEnabled     Boolean    @default(true)
  generalQuestions  Question[] @relation(name: "Website_Questions")
}

// model StoryItem {
//     id             Int          @id @default(autoincrement())
//     photoUrl       String
//     title          String
//     text           String
//     homePageItemId Int
//     homePageItem   HomePageItem @relation(fields: [homePageItemId], references: [id])

//     @@index([homePageItemId])
// }

// model HomePageItem {
//     id        Int         @id @default(autoincrement())
//     websiteId String
//     title     String
//     textBlock String
//     photoUrl  String
//     gifUrl    String
//     story     StoryItem[]
// }

model User {
  id             String @id
  websiteUrl     String @db.VarChar(255)
  email          String @unique @db.VarChar(255)
  groomFirstName String
  groomLastName  String
  brideFirstName String
  brideLastName  String
}

model Household {
  id             String           @id @default(uuid())
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  address1       String?
  address2       String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  phone          String?
  email          String?
  notes          String?
  gifts          Gift[]           @relation(name: "Household_Gifts")
  guests         Guest[]          @relation(name: "Household_Guests")
  answers        Answer[]         @relation(name: "Household_Answers")
  optionReponses OptionResponse[] @relation(name: "Household_OptionResponses")
}

model Gift {
  householdId String
  household   Household @relation(name: "Household_Gifts", fields: [householdId], references: [id], onDelete: Cascade)
  eventId     String
  event       Event     @relation(name: "Event_Gifts", fields: [eventId], references: [id], onDelete: Cascade)
  description String?
  thankyou    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id(name: "GiftId", [householdId, eventId])
  @@index([householdId])
  @@index([eventId])
}

model Guest {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  householdId      String
  userId           String
  isPrimaryContact Boolean
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  household        Household        @relation(name: "Household_Guests", fields: [householdId], references: [id], onDelete: Cascade)
  invitations      Invitation[]     @relation(name: "Guest_Invitations")
  optionResponses  OptionResponse[] @relation(name: "Guest_OptionResponses")
  answers          Answer[]         @relation(name: "Guest_Answers")

  @@index([householdId])
  @@fulltext([firstName])
  @@fulltext([lastName])
}

model Event {
  id          String       @id @default(uuid())
  name        String
  date        DateTime?    @db.Date
  startTime   String?
  endTime     String?
  venue       String?
  attire      String?
  description String?
  userId      String
  collectRsvp Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invitations Invitation[] @relation(name: "Event_Invitations")
  gifts       Gift[]       @relation(name: "Event_Gifts")
  questions   Question[]   @relation(name: "Event_Questions")
  // subEvents   SubEvent[]   @relation(name: "Event_SubEvent")
}

// model SubEvent {
//     id          String    @id @default(uuid())
//     name        String
//     date        DateTime? @db.Date
//     startTime   String?
//     endTime     String?
//     venue       String?
//     attire      String?
//     description String?
//     eventId     String
//     event       Event     @relation(name: "Event_SubEvent", fields: [eventId], references: [id], onDelete: Cascade)

//     @@index([eventId])
// }

// website relations are the general questions
model Question {
  id         String   @id @default(uuid())
  eventId    String?
  event      Event?   @relation(name: "Event_Questions", fields: [eventId], references: [id], onDelete: Cascade)
  websiteId  String?
  website    Website? @relation(name: "Website_Questions", fields: [websiteId], references: [id], onDelete: Cascade)
  text       String
  //   type       String // idk what this is for yet tbh ['Custom', 'Kids', 'RSVPNote']
  type       String // ['Text', 'Option']
  isRequired Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  options    Option[] @relation(name: "Question_Options")
  answers    Answer[] @relation(name: "Question_Answers")

  @@index([eventId])
  @@index([websiteId])
}

model Option {
  id              String           @id @default(uuid())
  responseCount   Int              @default(0)
  text            String
  description     String
  question        Question         @relation(name: "Question_Options", fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  optionResponses OptionResponse[] @relation(name: "Option_OptionResponses")

  @@index([questionId])
}

// for counting the number of guests that selected an option?
model OptionResponse {
  option         Option     @relation(name: "Option_OptionResponses", fields: [optionId], references: [id], onDelete: Cascade)
  optionId       String
  guest          Guest?     @relation(name: "Guest_OptionResponses", fields: [guestId], references: [id], onDelete: Cascade)
  guestId        Int
  household      Household? @relation(name: "Household_OptionResponses", fields: [householdId], references: [id], onDelete: Cascade)
  householdId    String
  guestFirstName String?
  guestLastName  String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@id(name: "optionResponseId", [optionId, guestId, householdId])
  @@index([guestId])
  @@index([householdId])
  @@index([optionId])
}

model Answer {
  response       String
  question       Question   @relation(name: "Question_Answers", fields: [questionId], references: [id], onDelete: Cascade)
  questionId     String
  guest          Guest?     @relation(name: "Guest_Answers", fields: [guestId], references: [id], onDelete: Cascade)
  guestId        Int
  household      Household? @relation(name: "Household_Answers", fields: [householdId], references: [id], onDelete: Cascade)
  householdId    String
  guestFirstName String?
  guestLastName  String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@id(name: "answerId", [questionId, guestId, householdId])
  @@index([guestId])
  @@index([householdId])
  @@index([questionId])
}

model Invitation {
  guest     Guest    @relation(name: "Guest_Invitations", fields: [guestId], references: [id], onDelete: Cascade)
  guestId   Int
  event     Event    @relation(name: "Event_Invitations", fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  invitedAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rsvp      String?  @default("Not Invited") // ['Invited', 'Attending', 'Declined']
  userId    String

  @@id(name: "invitationId", [guestId, eventId])
  @@index([guestId])
  @@index([eventId])
}
